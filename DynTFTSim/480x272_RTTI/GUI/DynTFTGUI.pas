{   DynTFT  - graphic components for microcontrollers
    Copyright (C) 2017 VCC
    release date: 29 Dec 2017
    author: VCC

    This file is part of DynTFT project.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

//Generated by DynTFTCodeGen.


unit DynTFTGUI;

{$IFNDEF IsMCU}
  {$DEFINE IsDesktop}
{$ENDIF} 

{$IFDEF IsDesktop}
interface
{$ENDIF}

uses
  DynTFTTypes, DynTFTConsts, DynTFTUtils, DynTFTBaseDrawing,
  DynTFTGUIObjects, DynTFTHandlers,

//<DynTFTComponents>
  DynTFTButton,
  DynTFTArrowButton,
  DynTFTPanel,
  DynTFTCheckBox,
  DynTFTScrollBar,
  DynTFTItems,
  DynTFTListBox,
  DynTFTLabel,
  DynTFTRadioButton,
  DynTFTRadioGroup,
  DynTFTTabButton,
  DynTFTPageControl,
  DynTFTEdit,
  DynTFTKeyButton,
  DynTFTVirtualKeyboard,
  DynTFTComboBox,
  DynTFTTrackBar,
  DynTFTProgressBar,
  DynTFTMessageBox
//<EndOfDynTFTComponents> - Do not remove or modify this line!

  
  {$IFDEF IsDesktop}
    , SysUtils
    {$IFDEF DynTFTFontSupport}, DynTFTFonts {$ENDIF}
  {$ENDIF}

  {$I DynTFTGUIAdditionalUnits.inc}
  ;


procedure DynTFT_GUI_Start;
procedure DrawGUI; //Made available for debugging or various performance improvements. Called by DynTFT_GUI_Start.


implementation


// Project name: GUI_Example_480x272_RTTI.dyntftcg //Do not delete or modify this line!

procedure SetScreenActivity;
var
  i: Integer;
begin
  DynTFTAllComponentsContainer[0].Active := True;
  DynTFTAllComponentsContainer[1].Active := True;
  DynTFTAllComponentsContainer[2].Active := False;
  DynTFTAllComponentsContainer[3].Active := False;
  DynTFTAllComponentsContainer[4].Active := False;
  DynTFTAllComponentsContainer[5].Active := False;
  DynTFTAllComponentsContainer[6].Active := False;

  DynTFTAllComponentsContainer[0].ScreenColor := CL_DynTFTScreen_Background;
  DynTFTAllComponentsContainer[1].ScreenColor := CL_DynTFTScreen_Background;
  DynTFTAllComponentsContainer[2].ScreenColor := CL_DynTFTScreen_Background;
  DynTFTAllComponentsContainer[3].ScreenColor := CL_DynTFTScreen_Background;
  DynTFTAllComponentsContainer[4].ScreenColor := {$IFDEF IsDesktop} $0079FFBC {$ELSE} $BFEF {$ENDIF};
  DynTFTAllComponentsContainer[5].ScreenColor := CL_DynTFTScreen_Background;
  DynTFTAllComponentsContainer[6].ScreenColor := CL_DynTFTScreen_Background;

  for i := 7 to CDynTFTMaxComponentsContainer - 1 do
    DynTFTAllComponentsContainer[i].Active := False;

  DynTFT_Set_Pen(DynTFTAllComponentsContainer[0].ScreenColor, 1);
  DynTFT_Set_Brush(1, DynTFTAllComponentsContainer[0].ScreenColor, 0, 0, 0, 0);
  DynTFT_Rectangle(0, 0, TFT_DISP_WIDTH, TFT_DISP_HEIGHT);
end;

procedure RegisterAllComponentsEvents;
begin
  DynTFTRegisterButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTButton type: ' + IntToStr(DynTFTGetButtonComponentType));{$ENDIF}
  DynTFTRegisterArrowButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTArrowButton type: ' + IntToStr(DynTFTGetArrowButtonComponentType));{$ENDIF}
  DynTFTRegisterPanelEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTPanel type: ' + IntToStr(DynTFTGetPanelComponentType));{$ENDIF}
  DynTFTRegisterCheckBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTCheckBox type: ' + IntToStr(DynTFTGetCheckBoxComponentType));{$ENDIF}
  DynTFTRegisterScrollBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTScrollBar type: ' + IntToStr(DynTFTGetScrollBarComponentType));{$ENDIF}
  DynTFTRegisterItemsEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTItems type: ' + IntToStr(DynTFTGetItemsComponentType));{$ENDIF}
  DynTFTRegisterListBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTListBox type: ' + IntToStr(DynTFTGetListBoxComponentType));{$ENDIF}
  DynTFTRegisterLabelEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTLabel type: ' + IntToStr(DynTFTGetLabelComponentType));{$ENDIF}
  DynTFTRegisterRadioButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTRadioButton type: ' + IntToStr(DynTFTGetRadioButtonComponentType));{$ENDIF}
  DynTFTRegisterRadioGroupEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTRadioGroup type: ' + IntToStr(DynTFTGetRadioGroupComponentType));{$ENDIF}
  DynTFTRegisterTabButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTTabButton type: ' + IntToStr(DynTFTGetTabButtonComponentType));{$ENDIF}
  DynTFTRegisterPageControlEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTPageControl type: ' + IntToStr(DynTFTGetPageControlComponentType));{$ENDIF}
  DynTFTRegisterEditEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTEdit type: ' + IntToStr(DynTFTGetEditComponentType));{$ENDIF}
  DynTFTRegisterKeyButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTKeyButton type: ' + IntToStr(DynTFTGetKeyButtonComponentType));{$ENDIF}
  DynTFTRegisterVirtualKeyboardEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTVirtualKeyboard type: ' + IntToStr(DynTFTGetVirtualKeyboardComponentType));{$ENDIF}
  DynTFTRegisterComboBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTComboBox type: ' + IntToStr(DynTFTGetComboBoxComponentType));{$ENDIF}
  DynTFTRegisterTrackBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTTrackBar type: ' + IntToStr(DynTFTGetTrackBarComponentType));{$ENDIF}
  DynTFTRegisterProgressBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTProgressBar type: ' + IntToStr(DynTFTGetProgressBarComponentType));{$ENDIF}
  DynTFTRegisterMessageBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTMessageBox type: ' + IntToStr(DynTFTGetMessageBoxComponentType));{$ENDIF}
end;

procedure CreateGUI_Screen_0; //Tabs
begin
  PageControl1 := DynTFTPageControl_Create(0, 0, 1, 284, 25);
  {$DEFINE PageControl1_CHorizontal}
  {$IFDEF PageControl1_CVertical}
    PDynTFTPageControl_CreateAllTabButtonsAsVertical(0, 1, 284, 20, 6, PageControl1, CPageControl1_Captions);
  {$ELSE}
    PDynTFTPageControl_CreateAllTabButtonsAsHorizontal(0, 1, 25, 6, CPageControl1_ButtonLefts, CPageControl1_ButtonWidths, PageControl1, CPageControl1_Captions);
  {$ENDIF}
  {$DEFINE PageControl1_Enabled_1}
  {$IFDEF PageControl1_Enabled_0}
    DynTFTDisablePageControl(PageControl1);
  {$ENDIF}
  {$IFDEF IsDesktop}
    PageControl1^.OnChange^ := PageControl1_OnChange;
  {$ELSE}
    PageControl1^.OnChange := @PageControl1_OnChange;
  {$ENDIF}


  lblRTTIDataSrcInfo := DynTFTLabel_Create(0, 291, 3, 125, 20);
  lblRTTIDataSrcInfo^.Caption := C_lblRTTIDataSrcInfo_Caption; //'DataSrc'
  lblRTTIDataSrcInfo^.Color := {$IFDEF IsDesktop} $00FF8000 {$ELSE} $041F {$ENDIF};
  lblRTTIDataSrcInfo^.Font_Color := CL_WHITE;

end;

procedure CreateGUI_Screen_1; //Tab1
begin
  // btn1 should be manually created.

  // btn2 should be manually created.

  // Arrow1 should be manually created.

  // Arrow2 should be manually created.

  // Arrow3 should be manually created.

  // Arrow4 should be manually created.

  // Panel1 should be manually created.

  // Arrow5 should be manually created.

  // Arrow6 should be manually created.

  // Arrow7 should be manually created.

  // Arrow8 should be manually created.

  // btn3 should be manually created.

  // btn4 should be manually created.

  // Arrow9 should be manually created.
end;

procedure CreateGUI_Screen_2; //Tab2
begin
  // CheckBox1 should be manually created.

  // CheckBox2 should be manually created.

  // CheckBox3 should be manually created.

  // ScrollBar1 should be manually created.

  // ScrollBar2 should be manually created.

  // ListBox1 should be manually created.

  // ListBox3 should be manually created.

  // DynTFTButton0 should be manually created.
end;

procedure CreateGUI_Screen_3; //Tab3
begin
  // lbl1 should be manually created.

  // lbl2 should be manually created.

  // lbl3 should be manually created.

  // lbl4 should be manually created.

  // rdgrpTest should be manually created.

  // rdgrpTest1 should be manually created.
end;

procedure CreateGUI_Screen_4; //Tab4
begin
  // vkTest should be manually created.

  // Edit1 should be manually created.
end;

procedure CreateGUI_Screen_5; //Tab5
begin
  // ComboBox1 should be manually created.

  // ComboBox2 should be manually created.

  // Label4 should be manually created.

  // Label5 should be manually created.

  // ListBox2 should be manually created.

  // ListBox4 should be manually created.
end;

procedure CreateGUI_Screen_6; //Tab6
begin
  // TrackBar1 should be manually created.

  // TrackBar2 should be manually created.

  // ProgressBar1 should be manually created.

  // ProgressBar2 should be manually created.

  // btnShowMessageBox should be manually created.
end;


{$IFDEF RTTIREG}
  {$IFDEF IsDesktop} {$IFDEF DesktopApp_D2006} // profile: DesktopApp_D2006
    function DynTFTButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..5] of PPtrRec;
      AComponent: PDynTFTButton;
    begin
      AComponent := PDynTFTButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Font_Color));
      ComponentProperties[2] := @((AComponent^.BaseProps.Enabled));
      ComponentProperties[3] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[4] := @((AComponent^.ActiveFont));
      ComponentProperties[5] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.BaseProps.OnMouseUpUser));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTArrowButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTArrowButton;
    begin
      AComponent := PDynTFTArrowButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Color));
      ComponentProperties[1] := @((AComponent^.ArrowDir));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTPanel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTPanel;
    begin
      AComponent := PDynTFTPanel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTCheckBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTCheckBox;
    begin
      AComponent := PDynTFTCheckBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Color));
      ComponentProperties[2] := @((AComponent^.Font_Color));
      ComponentProperties[3] := @((AComponent^.BaseProps.Enabled));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTScrollBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTScrollBar;
    begin
      AComponent := PDynTFTScrollBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Direction));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTListBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..12] of PPtrRec;
      AComponent: PDynTFTListBox;
    begin
      AComponent := PDynTFTListBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTLabel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTLabel;
    begin
      AComponent := PDynTFTLabel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTVirtualKeyboard_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTVirtualKeyboard;
    begin
      AComponent := PDynTFTVirtualKeyboard(TPtrRec(AComp));
      ComponentProperties[0] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnCharKey));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnSpecialKey));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTEdit_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTEdit;
    begin
      AComponent := PDynTFTEdit(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Text{$IFDEF IsDesktop}[1]{$ENDIF}));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTComboBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..14] of PPtrRec;
      AComponent: PDynTFTComboBox;
    begin
      AComponent := PDynTFTComboBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.ListBox^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.ListBox^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.ListBox^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.ListBox^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.ListBox^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.ListBox^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.ListBox^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.ListBox^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.ListBox^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.ListBox^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.ListBox^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.ListBox^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Edit^.Color));
      ComponentProperties[13] := @((AComponent^.Editable));
      ComponentProperties[14] := @((AComponent^.ListBox^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTTrackBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTTrackBar;
    begin
      AComponent := PDynTFTTrackBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Position));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnTrackBarChange));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTProgressBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTProgressBar;
    begin
      AComponent := PDynTFTProgressBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Position));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    procedure UpdatePropertyAddress_Registry;
    begin
      DynTFTRegisteredComponents[1].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTButton_GetPropertyAddress {$ELSE} @DynTFTButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[2].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTArrowButton_GetPropertyAddress {$ELSE} @DynTFTArrowButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[3].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTPanel_GetPropertyAddress {$ELSE} @DynTFTPanel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[4].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTCheckBox_GetPropertyAddress {$ELSE} @DynTFTCheckBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[5].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTScrollBar_GetPropertyAddress {$ELSE} @DynTFTScrollBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[7].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTListBox_GetPropertyAddress {$ELSE} @DynTFTListBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[8].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTLabel_GetPropertyAddress {$ELSE} @DynTFTLabel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[15].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTVirtualKeyboard_GetPropertyAddress {$ELSE} @DynTFTVirtualKeyboard_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[13].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTEdit_GetPropertyAddress {$ELSE} @DynTFTEdit_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[16].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTComboBox_GetPropertyAddress {$ELSE} @DynTFTComboBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[17].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTTrackBar_GetPropertyAddress {$ELSE} @DynTFTTrackBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[18].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTProgressBar_GetPropertyAddress {$ELSE} @DynTFTProgressBar_GetPropertyAddress {$ENDIF};
    end;
  {$ENDIF} {$ENDIF} // profile: DesktopApp_D2006 {$IFDEF DesktopApp_D2006}

  {$IFDEF IsMCU} {$IFDEF PIC32App} // profile: PIC32App
    function DynTFTButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..5] of PPtrRec;
      AComponent: PDynTFTButton;
    begin
      AComponent := PDynTFTButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Font_Color));
      ComponentProperties[2] := @((AComponent^.BaseProps.Enabled));
      ComponentProperties[3] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[4] := @((AComponent^.ActiveFont));
      ComponentProperties[5] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.BaseProps.OnMouseUpUser));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTArrowButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTArrowButton;
    begin
      AComponent := PDynTFTArrowButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Color));
      ComponentProperties[1] := @((AComponent^.ArrowDir));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTPanel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTPanel;
    begin
      AComponent := PDynTFTPanel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTCheckBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTCheckBox;
    begin
      AComponent := PDynTFTCheckBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Color));
      ComponentProperties[2] := @((AComponent^.Font_Color));
      ComponentProperties[3] := @((AComponent^.BaseProps.Enabled));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTScrollBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTScrollBar;
    begin
      AComponent := PDynTFTScrollBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Direction));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTListBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..12] of PPtrRec;
      AComponent: PDynTFTListBox;
    begin
      AComponent := PDynTFTListBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTLabel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTLabel;
    begin
      AComponent := PDynTFTLabel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTVirtualKeyboard_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTVirtualKeyboard;
    begin
      AComponent := PDynTFTVirtualKeyboard(TPtrRec(AComp));
      ComponentProperties[0] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnCharKey));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnSpecialKey));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTEdit_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTEdit;
    begin
      AComponent := PDynTFTEdit(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Text{$IFDEF IsDesktop}[1]{$ENDIF}));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTComboBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..14] of PPtrRec;
      AComponent: PDynTFTComboBox;
    begin
      AComponent := PDynTFTComboBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.ListBox^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.ListBox^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.ListBox^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.ListBox^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.ListBox^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.ListBox^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.ListBox^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.ListBox^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.ListBox^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.ListBox^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.ListBox^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.ListBox^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Edit^.Color));
      ComponentProperties[13] := @((AComponent^.Editable));
      ComponentProperties[14] := @((AComponent^.ListBox^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTTrackBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTTrackBar;
    begin
      AComponent := PDynTFTTrackBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Position));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnTrackBarChange));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTProgressBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTProgressBar;
    begin
      AComponent := PDynTFTProgressBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Position));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    procedure UpdatePropertyAddress_Registry;
    begin
      DynTFTRegisteredComponents[1].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTButton_GetPropertyAddress {$ELSE} @DynTFTButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[2].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTArrowButton_GetPropertyAddress {$ELSE} @DynTFTArrowButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[3].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTPanel_GetPropertyAddress {$ELSE} @DynTFTPanel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[4].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTCheckBox_GetPropertyAddress {$ELSE} @DynTFTCheckBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[5].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTScrollBar_GetPropertyAddress {$ELSE} @DynTFTScrollBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[7].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTListBox_GetPropertyAddress {$ELSE} @DynTFTListBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[8].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTLabel_GetPropertyAddress {$ELSE} @DynTFTLabel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[15].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTVirtualKeyboard_GetPropertyAddress {$ELSE} @DynTFTVirtualKeyboard_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[13].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTEdit_GetPropertyAddress {$ELSE} @DynTFTEdit_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[16].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTComboBox_GetPropertyAddress {$ELSE} @DynTFTComboBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[17].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTTrackBar_GetPropertyAddress {$ELSE} @DynTFTTrackBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[18].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTProgressBar_GetPropertyAddress {$ELSE} @DynTFTProgressBar_GetPropertyAddress {$ENDIF};
    end;
  {$ENDIF} {$ENDIF} // profile: PIC32App {$IFDEF PIC32App}

  {$IFDEF IsDesktop} {$IFDEF DesktopApp_D10_2} // profile: DesktopApp_D10_2
    function DynTFTButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..5] of PPtrRec;
      AComponent: PDynTFTButton;
    begin
      AComponent := PDynTFTButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Font_Color));
      ComponentProperties[2] := @((AComponent^.BaseProps.Enabled));
      ComponentProperties[3] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[4] := @((AComponent^.ActiveFont));
      ComponentProperties[5] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.BaseProps.OnMouseUpUser));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTArrowButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTArrowButton;
    begin
      AComponent := PDynTFTArrowButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Color));
      ComponentProperties[1] := @((AComponent^.ArrowDir));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTPanel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTPanel;
    begin
      AComponent := PDynTFTPanel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTCheckBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTCheckBox;
    begin
      AComponent := PDynTFTCheckBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Color));
      ComponentProperties[2] := @((AComponent^.Font_Color));
      ComponentProperties[3] := @((AComponent^.BaseProps.Enabled));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTScrollBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTScrollBar;
    begin
      AComponent := PDynTFTScrollBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Direction));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTListBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..12] of PPtrRec;
      AComponent: PDynTFTListBox;
    begin
      AComponent := PDynTFTListBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTLabel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTLabel;
    begin
      AComponent := PDynTFTLabel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTVirtualKeyboard_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTVirtualKeyboard;
    begin
      AComponent := PDynTFTVirtualKeyboard(TPtrRec(AComp));
      ComponentProperties[0] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnCharKey));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnSpecialKey));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTEdit_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTEdit;
    begin
      AComponent := PDynTFTEdit(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Text{$IFDEF IsDesktop}[1]{$ENDIF}));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTComboBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..14] of PPtrRec;
      AComponent: PDynTFTComboBox;
    begin
      AComponent := PDynTFTComboBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.ListBox^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.ListBox^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.ListBox^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.ListBox^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.ListBox^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.ListBox^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.ListBox^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.ListBox^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.ListBox^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.ListBox^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.ListBox^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.ListBox^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Edit^.Color));
      ComponentProperties[13] := @((AComponent^.Editable));
      ComponentProperties[14] := @((AComponent^.ListBox^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTTrackBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTTrackBar;
    begin
      AComponent := PDynTFTTrackBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Position));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnTrackBarChange));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTProgressBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTProgressBar;
    begin
      AComponent := PDynTFTProgressBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Position));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    procedure UpdatePropertyAddress_Registry;
    begin
      DynTFTRegisteredComponents[1].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTButton_GetPropertyAddress {$ELSE} @DynTFTButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[2].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTArrowButton_GetPropertyAddress {$ELSE} @DynTFTArrowButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[3].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTPanel_GetPropertyAddress {$ELSE} @DynTFTPanel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[4].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTCheckBox_GetPropertyAddress {$ELSE} @DynTFTCheckBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[5].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTScrollBar_GetPropertyAddress {$ELSE} @DynTFTScrollBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[7].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTListBox_GetPropertyAddress {$ELSE} @DynTFTListBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[8].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTLabel_GetPropertyAddress {$ELSE} @DynTFTLabel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[15].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTVirtualKeyboard_GetPropertyAddress {$ELSE} @DynTFTVirtualKeyboard_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[13].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTEdit_GetPropertyAddress {$ELSE} @DynTFTEdit_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[16].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTComboBox_GetPropertyAddress {$ELSE} @DynTFTComboBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[17].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTTrackBar_GetPropertyAddress {$ELSE} @DynTFTTrackBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[18].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTProgressBar_GetPropertyAddress {$ELSE} @DynTFTProgressBar_GetPropertyAddress {$ENDIF};
    end;
  {$ENDIF} {$ENDIF} // profile: DesktopApp_D10_2 {$IFDEF DesktopApp_D10_2}

  {$IFDEF IsDesktop} {$IFDEF DesktopApp_FP} // profile: DesktopApp_FP
    function DynTFTButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..5] of PPtrRec;
      AComponent: PDynTFTButton;
    begin
      AComponent := PDynTFTButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Font_Color));
      ComponentProperties[2] := @((AComponent^.BaseProps.Enabled));
      ComponentProperties[3] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[4] := @((AComponent^.ActiveFont));
      ComponentProperties[5] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.BaseProps.OnMouseUpUser));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTArrowButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTArrowButton;
    begin
      AComponent := PDynTFTArrowButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Color));
      ComponentProperties[1] := @((AComponent^.ArrowDir));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTPanel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTPanel;
    begin
      AComponent := PDynTFTPanel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTCheckBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTCheckBox;
    begin
      AComponent := PDynTFTCheckBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Color));
      ComponentProperties[2] := @((AComponent^.Font_Color));
      ComponentProperties[3] := @((AComponent^.BaseProps.Enabled));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTScrollBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTScrollBar;
    begin
      AComponent := PDynTFTScrollBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Direction));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTListBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..12] of PPtrRec;
      AComponent: PDynTFTListBox;
    begin
      AComponent := PDynTFTListBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTLabel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTLabel;
    begin
      AComponent := PDynTFTLabel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTVirtualKeyboard_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTVirtualKeyboard;
    begin
      AComponent := PDynTFTVirtualKeyboard(TPtrRec(AComp));
      ComponentProperties[0] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnCharKey));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnSpecialKey));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTEdit_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTEdit;
    begin
      AComponent := PDynTFTEdit(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Text{$IFDEF IsDesktop}[1]{$ENDIF}));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTComboBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..14] of PPtrRec;
      AComponent: PDynTFTComboBox;
    begin
      AComponent := PDynTFTComboBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.ListBox^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.ListBox^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.ListBox^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.ListBox^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.ListBox^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.ListBox^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.ListBox^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.ListBox^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.ListBox^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.ListBox^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.ListBox^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.ListBox^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Edit^.Color));
      ComponentProperties[13] := @((AComponent^.Editable));
      ComponentProperties[14] := @((AComponent^.ListBox^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTTrackBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTTrackBar;
    begin
      AComponent := PDynTFTTrackBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Position));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnTrackBarChange));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTProgressBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTProgressBar;
    begin
      AComponent := PDynTFTProgressBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Position));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    procedure UpdatePropertyAddress_Registry;
    begin
      DynTFTRegisteredComponents[1].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTButton_GetPropertyAddress {$ELSE} @DynTFTButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[2].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTArrowButton_GetPropertyAddress {$ELSE} @DynTFTArrowButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[3].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTPanel_GetPropertyAddress {$ELSE} @DynTFTPanel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[4].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTCheckBox_GetPropertyAddress {$ELSE} @DynTFTCheckBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[5].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTScrollBar_GetPropertyAddress {$ELSE} @DynTFTScrollBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[7].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTListBox_GetPropertyAddress {$ELSE} @DynTFTListBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[8].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTLabel_GetPropertyAddress {$ELSE} @DynTFTLabel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[15].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTVirtualKeyboard_GetPropertyAddress {$ELSE} @DynTFTVirtualKeyboard_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[13].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTEdit_GetPropertyAddress {$ELSE} @DynTFTEdit_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[16].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTComboBox_GetPropertyAddress {$ELSE} @DynTFTComboBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[17].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTTrackBar_GetPropertyAddress {$ELSE} @DynTFTTrackBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[18].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTProgressBar_GetPropertyAddress {$ELSE} @DynTFTProgressBar_GetPropertyAddress {$ENDIF};
    end;
  {$ENDIF} {$ENDIF} // profile: DesktopApp_FP {$IFDEF DesktopApp_FP}

  {$IFDEF IsMCU} {$IFDEF PIC32AppAddrArr} // profile: PIC32AppAddrArr
    function DynTFTButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..5] of PPtrRec;
      AComponent: PDynTFTButton;
    begin
      AComponent := PDynTFTButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Font_Color));
      ComponentProperties[2] := @((AComponent^.BaseProps.Enabled));
      ComponentProperties[3] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[4] := @((AComponent^.ActiveFont));
      ComponentProperties[5] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.BaseProps.OnMouseUpUser));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTArrowButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTArrowButton;
    begin
      AComponent := PDynTFTArrowButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Color));
      ComponentProperties[1] := @((AComponent^.ArrowDir));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTPanel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTPanel;
    begin
      AComponent := PDynTFTPanel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTCheckBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTCheckBox;
    begin
      AComponent := PDynTFTCheckBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Color));
      ComponentProperties[2] := @((AComponent^.Font_Color));
      ComponentProperties[3] := @((AComponent^.BaseProps.Enabled));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTScrollBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTScrollBar;
    begin
      AComponent := PDynTFTScrollBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Direction));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTListBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..12] of PPtrRec;
      AComponent: PDynTFTListBox;
    begin
      AComponent := PDynTFTListBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTLabel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTLabel;
    begin
      AComponent := PDynTFTLabel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTVirtualKeyboard_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTVirtualKeyboard;
    begin
      AComponent := PDynTFTVirtualKeyboard(TPtrRec(AComp));
      ComponentProperties[0] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnCharKey));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnSpecialKey));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTEdit_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTEdit;
    begin
      AComponent := PDynTFTEdit(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Text{$IFDEF IsDesktop}[1]{$ENDIF}));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTComboBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..14] of PPtrRec;
      AComponent: PDynTFTComboBox;
    begin
      AComponent := PDynTFTComboBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.ListBox^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.ListBox^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.ListBox^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.ListBox^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.ListBox^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.ListBox^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.ListBox^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.ListBox^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.ListBox^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.ListBox^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.ListBox^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.ListBox^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Edit^.Color));
      ComponentProperties[13] := @((AComponent^.Editable));
      ComponentProperties[14] := @((AComponent^.ListBox^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTTrackBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTTrackBar;
    begin
      AComponent := PDynTFTTrackBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Position));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnTrackBarChange));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTProgressBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTProgressBar;
    begin
      AComponent := PDynTFTProgressBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Position));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    procedure UpdatePropertyAddress_Registry;
    begin
      DynTFTRegisteredComponents[1].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTButton_GetPropertyAddress {$ELSE} @DynTFTButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[2].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTArrowButton_GetPropertyAddress {$ELSE} @DynTFTArrowButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[3].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTPanel_GetPropertyAddress {$ELSE} @DynTFTPanel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[4].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTCheckBox_GetPropertyAddress {$ELSE} @DynTFTCheckBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[5].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTScrollBar_GetPropertyAddress {$ELSE} @DynTFTScrollBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[7].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTListBox_GetPropertyAddress {$ELSE} @DynTFTListBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[8].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTLabel_GetPropertyAddress {$ELSE} @DynTFTLabel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[15].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTVirtualKeyboard_GetPropertyAddress {$ELSE} @DynTFTVirtualKeyboard_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[13].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTEdit_GetPropertyAddress {$ELSE} @DynTFTEdit_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[16].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTComboBox_GetPropertyAddress {$ELSE} @DynTFTComboBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[17].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTTrackBar_GetPropertyAddress {$ELSE} @DynTFTTrackBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[18].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTProgressBar_GetPropertyAddress {$ELSE} @DynTFTProgressBar_GetPropertyAddress {$ENDIF};
    end;
  {$ENDIF} {$ENDIF} // profile: PIC32AppAddrArr {$IFDEF PIC32AppAddrArr}

  {$IFDEF IsMCU} {$IFDEF PIC32AppWithSDCard} // profile: PIC32AppWithSDCard
    function DynTFTButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..5] of PPtrRec;
      AComponent: PDynTFTButton;
    begin
      AComponent := PDynTFTButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Font_Color));
      ComponentProperties[2] := @((AComponent^.BaseProps.Enabled));
      ComponentProperties[3] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[4] := @((AComponent^.ActiveFont));
      ComponentProperties[5] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.BaseProps.OnMouseUpUser));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTArrowButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTArrowButton;
    begin
      AComponent := PDynTFTArrowButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Color));
      ComponentProperties[1] := @((AComponent^.ArrowDir));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTPanel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTPanel;
    begin
      AComponent := PDynTFTPanel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTCheckBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTCheckBox;
    begin
      AComponent := PDynTFTCheckBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Color));
      ComponentProperties[2] := @((AComponent^.Font_Color));
      ComponentProperties[3] := @((AComponent^.BaseProps.Enabled));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTScrollBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTScrollBar;
    begin
      AComponent := PDynTFTScrollBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Direction));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTListBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..12] of PPtrRec;
      AComponent: PDynTFTListBox;
    begin
      AComponent := PDynTFTListBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTLabel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTLabel;
    begin
      AComponent := PDynTFTLabel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTVirtualKeyboard_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTVirtualKeyboard;
    begin
      AComponent := PDynTFTVirtualKeyboard(TPtrRec(AComp));
      ComponentProperties[0] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnCharKey));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnSpecialKey));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTEdit_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTEdit;
    begin
      AComponent := PDynTFTEdit(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Text{$IFDEF IsDesktop}[1]{$ENDIF}));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTComboBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..14] of PPtrRec;
      AComponent: PDynTFTComboBox;
    begin
      AComponent := PDynTFTComboBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.ListBox^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.ListBox^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.ListBox^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.ListBox^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.ListBox^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.ListBox^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.ListBox^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.ListBox^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.ListBox^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.ListBox^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.ListBox^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.ListBox^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Edit^.Color));
      ComponentProperties[13] := @((AComponent^.Editable));
      ComponentProperties[14] := @((AComponent^.ListBox^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTTrackBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTTrackBar;
    begin
      AComponent := PDynTFTTrackBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Position));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnTrackBarChange));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTProgressBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTProgressBar;
    begin
      AComponent := PDynTFTProgressBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Position));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    procedure UpdatePropertyAddress_Registry;
    begin
      DynTFTRegisteredComponents[1].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTButton_GetPropertyAddress {$ELSE} @DynTFTButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[2].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTArrowButton_GetPropertyAddress {$ELSE} @DynTFTArrowButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[3].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTPanel_GetPropertyAddress {$ELSE} @DynTFTPanel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[4].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTCheckBox_GetPropertyAddress {$ELSE} @DynTFTCheckBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[5].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTScrollBar_GetPropertyAddress {$ELSE} @DynTFTScrollBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[7].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTListBox_GetPropertyAddress {$ELSE} @DynTFTListBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[8].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTLabel_GetPropertyAddress {$ELSE} @DynTFTLabel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[15].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTVirtualKeyboard_GetPropertyAddress {$ELSE} @DynTFTVirtualKeyboard_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[13].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTEdit_GetPropertyAddress {$ELSE} @DynTFTEdit_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[16].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTComboBox_GetPropertyAddress {$ELSE} @DynTFTComboBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[17].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTTrackBar_GetPropertyAddress {$ELSE} @DynTFTTrackBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[18].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTProgressBar_GetPropertyAddress {$ELSE} @DynTFTProgressBar_GetPropertyAddress {$ENDIF};
    end;
  {$ENDIF} {$ENDIF} // profile: PIC32AppWithSDCard {$IFDEF PIC32AppWithSDCard}

  {$IFDEF IsMCU} {$IFDEF PIC32AppDWithSDCard} // profile: PIC32AppDWithSDCard
    function DynTFTButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..5] of PPtrRec;
      AComponent: PDynTFTButton;
    begin
      AComponent := PDynTFTButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Font_Color));
      ComponentProperties[2] := @((AComponent^.BaseProps.Enabled));
      ComponentProperties[3] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[4] := @((AComponent^.ActiveFont));
      ComponentProperties[5] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.BaseProps.OnMouseUpUser));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTArrowButton_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTArrowButton;
    begin
      AComponent := PDynTFTArrowButton(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Color));
      ComponentProperties[1] := @((AComponent^.ArrowDir));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTPanel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTPanel;
    begin
      AComponent := PDynTFTPanel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTCheckBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTCheckBox;
    begin
      AComponent := PDynTFTCheckBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[1] := @((AComponent^.Color));
      ComponentProperties[2] := @((AComponent^.Font_Color));
      ComponentProperties[3] := @((AComponent^.BaseProps.Enabled));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTScrollBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTScrollBar;
    begin
      AComponent := PDynTFTScrollBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Direction));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTListBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..12] of PPtrRec;
      AComponent: PDynTFTListBox;
    begin
      AComponent := PDynTFTListBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTLabel_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..3] of PPtrRec;
      AComponent: PDynTFTLabel;
    begin
      AComponent := PDynTFTLabel(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Caption{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.Color));
      ComponentProperties[3] := @((AComponent^.Font_Color));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTVirtualKeyboard_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..1] of PPtrRec;
      AComponent: PDynTFTVirtualKeyboard;
    begin
      AComponent := PDynTFTVirtualKeyboard(TPtrRec(AComp));
      ComponentProperties[0] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnCharKey));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnSpecialKey));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTEdit_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..0] of PPtrRec;
      AComponent: PDynTFTEdit;
    begin
      AComponent := PDynTFTEdit(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Text{$IFDEF IsDesktop}[1]{$ENDIF}));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTComboBox_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..14] of PPtrRec;
      AComponent: PDynTFTComboBox;
    begin
      AComponent := PDynTFTComboBox(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.ListBox^.Items^.BackgroundColor));
      ComponentProperties[1] := @((AComponent^.ListBox^.Items^.Strings[0]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[2] := @((AComponent^.ListBox^.Items^.Strings[1]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[3] := @((AComponent^.ListBox^.Items^.Strings[2]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[4] := @((AComponent^.ListBox^.Items^.Strings[3]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[5] := @((AComponent^.ListBox^.Items^.Strings[4]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[6] := @((AComponent^.ListBox^.Items^.Strings[5]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[7] := @((AComponent^.ListBox^.Items^.Strings[6]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[8] := @((AComponent^.ListBox^.Items^.Strings[7]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[9] := @((AComponent^.ListBox^.Items^.Strings[8]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[10] := @((AComponent^.ListBox^.Items^.Strings[9]{$IFDEF IsDesktop}[1]{$ENDIF}));
      ComponentProperties[11] := @((AComponent^.ListBox^.Items^.ItemHeight));
      ComponentProperties[12] := @((AComponent^.Edit^.Color));
      ComponentProperties[13] := @((AComponent^.Editable));
      ComponentProperties[14] := @((AComponent^.ListBox^.Items^.Count));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTTrackBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTTrackBar;
    begin
      AComponent := PDynTFTTrackBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.Position));
      ComponentProperties[1] := {$IFDEF IsDesktop}PPtrRec(TPtr {$ELSE} @( {$ENDIF}(AComponent^.OnTrackBarChange));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    function DynTFTProgressBar_GetPropertyAddress(AComp: PDynTFTBaseComponent; PropertyIndex: Byte): PPtrRec;
    var
      ComponentProperties: array[0..2] of PPtrRec;
      AComponent: PDynTFTProgressBar;
    begin
      AComponent := PDynTFTProgressBar(TPtrRec(AComp));
      ComponentProperties[0] := @((AComponent^.BaseProps.CanHandleMessages));
      ComponentProperties[1] := @((AComponent^.Position));
      ComponentProperties[2] := @((AComponent^.Orientation));
      Result := ComponentProperties[PropertyIndex];
    end;

    procedure UpdatePropertyAddress_Registry;
    begin
      DynTFTRegisteredComponents[1].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTButton_GetPropertyAddress {$ELSE} @DynTFTButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[2].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTArrowButton_GetPropertyAddress {$ELSE} @DynTFTArrowButton_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[3].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTPanel_GetPropertyAddress {$ELSE} @DynTFTPanel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[4].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTCheckBox_GetPropertyAddress {$ELSE} @DynTFTCheckBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[5].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTScrollBar_GetPropertyAddress {$ELSE} @DynTFTScrollBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[7].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTListBox_GetPropertyAddress {$ELSE} @DynTFTListBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[8].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTLabel_GetPropertyAddress {$ELSE} @DynTFTLabel_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[15].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTVirtualKeyboard_GetPropertyAddress {$ELSE} @DynTFTVirtualKeyboard_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[13].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTEdit_GetPropertyAddress {$ELSE} @DynTFTEdit_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[16].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTComboBox_GetPropertyAddress {$ELSE} @DynTFTComboBox_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[17].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTTrackBar_GetPropertyAddress {$ELSE} @DynTFTTrackBar_GetPropertyAddress {$ENDIF};
      DynTFTRegisteredComponents[18].CompGetPropertyAddress := {$IFDEF IsDesktop} DynTFTProgressBar_GetPropertyAddress {$ELSE} @DynTFTProgressBar_GetPropertyAddress {$ENDIF};
    end;
  {$ENDIF} {$ENDIF} // profile: PIC32AppDWithSDCard {$IFDEF PIC32AppDWithSDCard}

{$ENDIF} // RTTIREG


procedure DrawGUI;
begin
  {$IFDEF RTTIREG}
    UpdatePropertyAddress_Registry;
    // No indexed handler addresses found for profile: DesktopApp_D2006
    // No indexed handler addresses found for profile: PIC32App
    // No indexed handler addresses found for profile: DesktopApp_D10_2
    // No indexed handler addresses found for profile: DesktopApp_FP
    {$IFDEF IsMCU} {$IFDEF PIC32AppAddrArr} UpdateAllBinHandlerAddressArray; {$ENDIF} {$ENDIF} // Profile: PIC32AppAddrArr
    // No indexed handler addresses found for profile: PIC32AppWithSDCard
    // No indexed handler addresses found for profile: PIC32AppDWithSDCard
  {$ENDIF}

  CreateGUI_Screen_0;
  CreateGUI_Screen_1;
  CreateGUI_Screen_2;
  CreateGUI_Screen_3;
  CreateGUI_Screen_4;
  CreateGUI_Screen_5;
  CreateGUI_Screen_6;
  CreateGUIGrp_First;

  {$IFDEF RTTIREG}
    ExecuteDesignRTTIInstructions_Create(CDynTFT_InstructionFilter_CreateStartupOnly_BitMask);
  {$ENDIF}

  DynTFTRepaintScreenComponents(0, CREPAINTONSTARTUP, nil);
  DynTFTRepaintScreenComponents(1, CREPAINTONSTARTUP, nil);
end;


{$IFDEF IsDesktop}
  {$IFDEF RTTIREG}
    procedure InitAllBinGUIObjectsToNil;
    var
      i: Integer;
    begin
      for i := 0 to 38 do
        if CAllCreatedBinComponents[i] <> nil then
          CAllCreatedBinComponents[i]^ := nil;
    end;
  {$ENDIF}
{$ENDIF}

  {$IFDEF RTTIREG}
    function CheckIntegerAndPointerSize: Boolean;  // returs True for success
    {$IFDEF IsMCU}
      type
        Pointer = ^Integer;
    {$ENDIF}
    begin
      if SizeOf(Integer) <> C_ProfileIntegerSize then
      begin
        DynTFTDisplayErrorMessage(CRTTIBADINTEGERSIZE, CL_BLUE);
        {$IFDEF IsDesktop} DynTFT_DebugConsole('.................................... ' + CRTTIBADINTEGERSIZE + ' ...  SizeOf(Integer) <> ' + IntToStr(C_ProfileIntegerSize) + '  See profile settings.'); {$ENDIF}
        Result := False;
        Exit;
      end;

      if SizeOf(Pointer) <> C_ProfilePointerSize then
      begin
        DynTFTDisplayErrorMessage(CRTTIBADIPOINTERSIZE, CL_BLUE);
        {$IFDEF IsDesktop} DynTFT_DebugConsole('.................................... ' + CRTTIBADIPOINTERSIZE + ' ...  SizeOf(Pointer) <> ' + IntToStr(C_ProfilePointerSize) + '  See profile settings.'); {$ENDIF}
        Result := False;
        Exit;
      end;

      Result := True;
    end;
  {$ENDIF}


procedure DynTFT_GUI_Start;
begin
  {$IFDEF IsDesktop}
    DynTFT_DebugConsole('Entering DynTFT_GUI_Start');

    {$IFDEF RTTIREG}
      InitAllBinGUIObjectsToNil;
    {$ENDIF}
  {$ENDIF}

  {$IFDEF RTTIREG}
    LinkHandlers;
  {$ENDIF}

  DynTFTInitInputDevStateFlags;

  DynTFTInitComponentTypeRegistration;
  DynTFTInitComponentContainers;    //must be called after InitComponentTypeRegistration
  RegisterAllComponentsEvents;

  SetScreenActivity;

  {$IFDEF RTTIREG}
    if not CheckIntegerAndPointerSize then
      Exit;
  {$ENDIF}

  DrawGUI;
end;

end.
