{   DynTFT  - graphic components for microcontrollers
    Copyright (C) 2017 VCC
    release date: 29 Dec 2017
    author: VCC

    This file is part of DynTFT project.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

//Generated by DynTFTCodeGen.

unit DynTFTGUI;

{$IFNDEF IsMCU}
  {$DEFINE IsDesktop}
{$ENDIF} 

{$IFDEF IsDesktop}
interface
{$ENDIF}

uses
  DynTFTTypes, DynTFTConsts, DynTFTUtils, DynTFTBaseDrawing,
  DynTFTGUIObjects, DynTFTHandlers,

  DynTFTButton, DynTFTArrowButton, DynTFTPanel, DynTFTCheckBox, DynTFTScrollBar,
  DynTFTItems, DynTFTListBox, DynTFTLabel, DynTFTRadioButton, DynTFTRadioGroup,
  DynTFTTabButton, DynTFTPageControl, DynTFTEdit, DynTFTKeyButton,
  DynTFTVirtualKeyboard, DynTFTComboBox, DynTFTTrackBar, DynTFTProgressBar,
  DynTFTMessageBox

  {$IFDEF IsDesktop}
    , SysUtils
    {$IFDEF DynTFTFontSupport}, DynTFTFonts {$ENDIF}
  {$ENDIF}

  {$I DynTFTGUIAdditionalUnits.inc}
  ;


procedure DynTFT_GUI_Start;
procedure DrawGUI; //Made available for debugging or various performance improvements. Called by DynTFT_GUI_Start.


implementation


// Project name: GUI_Example_Unsized.dyntftcg //Do not delete or modify this line!

procedure SetScreenActivity;
var
  i: Integer;
begin
  DynTFTAllComponentsContainer[0].Active := True;

  DynTFTAllComponentsContainer[0].ScreenColor := CL_DynTFTScreen_Background;

  for i := 1 to CDynTFTMaxComponentsContainer - 1 do
    DynTFTAllComponentsContainer[i].Active := False;

  DynTFT_Set_Pen(DynTFTAllComponentsContainer[0].ScreenColor, 1);
  DynTFT_Set_Brush(1, DynTFTAllComponentsContainer[0].ScreenColor, 0, 0, 0, 0);
  DynTFT_Rectangle(0, 0, TFT_DISP_WIDTH, TFT_DISP_HEIGHT);
end;

procedure RegisterAllComponentsEvents;
begin
  DynTFTRegisterButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTButton type: ' + IntToStr(DynTFTGetButtonComponentType));{$ENDIF}
  DynTFTRegisterArrowButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTArrowButton type: ' + IntToStr(DynTFTGetArrowButtonComponentType));{$ENDIF}
  DynTFTRegisterPanelEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTPanel type: ' + IntToStr(DynTFTGetPanelComponentType));{$ENDIF}
  DynTFTRegisterCheckBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTCheckBox type: ' + IntToStr(DynTFTGetCheckBoxComponentType));{$ENDIF}
  DynTFTRegisterScrollBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTScrollBar type: ' + IntToStr(DynTFTGetScrollBarComponentType));{$ENDIF}
  DynTFTRegisterItemsEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTItems type: ' + IntToStr(DynTFTGetItemsComponentType));{$ENDIF}
  DynTFTRegisterListBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTListBox type: ' + IntToStr(DynTFTGetListBoxComponentType));{$ENDIF}
  DynTFTRegisterLabelEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTLabel type: ' + IntToStr(DynTFTGetLabelComponentType));{$ENDIF}
  DynTFTRegisterRadioButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTRadioButton type: ' + IntToStr(DynTFTGetRadioButtonComponentType));{$ENDIF}
  DynTFTRegisterRadioGroupEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTRadioGroup type: ' + IntToStr(DynTFTGetRadioGroupComponentType));{$ENDIF}
  DynTFTRegisterTabButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTTabButton type: ' + IntToStr(DynTFTGetTabButtonComponentType));{$ENDIF}
  DynTFTRegisterPageControlEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTPageControl type: ' + IntToStr(DynTFTGetPageControlComponentType));{$ENDIF}
  DynTFTRegisterEditEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTEdit type: ' + IntToStr(DynTFTGetEditComponentType));{$ENDIF}
  DynTFTRegisterKeyButtonEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTKeyButton type: ' + IntToStr(DynTFTGetKeyButtonComponentType));{$ENDIF}
  DynTFTRegisterVirtualKeyboardEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTVirtualKeyboard type: ' + IntToStr(DynTFTGetVirtualKeyboardComponentType));{$ENDIF}
  DynTFTRegisterComboBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTComboBox type: ' + IntToStr(DynTFTGetComboBoxComponentType));{$ENDIF}
  DynTFTRegisterTrackBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTTrackBar type: ' + IntToStr(DynTFTGetTrackBarComponentType));{$ENDIF}
  DynTFTRegisterProgressBarEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTProgressBar type: ' + IntToStr(DynTFTGetProgressBarComponentType));{$ENDIF}
  DynTFTRegisterMessageBoxEvents;        {$IFDEF IsDesktop}DynTFT_DebugConsole('DynTFTMessageBox type: ' + IntToStr(DynTFTGetMessageBoxComponentType));{$ENDIF}
end;

//RadioGroup code
type
  TRadioButtonCaption = string[CMaxRadioButtonStringLength];
  TRadioButtonCaptionArr = array{$IFDEF IsMCU}[0..0]{$ENDIF} of TRadioButtonCaption;

procedure PDynTFTRadioGroup_CreateRadioButton(Left, Top, Width, Height: Integer; {$IFDEF IsMCU} var {$ENDIF}Caption: string; Parent: PDynTFTRadioGroup);
var
  radbtn: PDynTFTRadioButton;
begin
  radbtn := DynTFTRadioButton_Create(Parent^.BaseProps.ScreenIndex, Left, Top, Width, Height);
  radbtn^.Caption := Caption;
  DynTFTAddRadioButtonToRadioGroup(Parent, radbtn);
end;

procedure PDynTFTRadioGroup_CreateAllRadioButtons(Left, Top, Width, Height, ButtonCount: Integer; Parent: PDynTFTRadioGroup; {$IFDEF IsMCU}var Captions: TRadioButtonCaptionArr{$ELSE} const Captions: array of TRadioButtonCaption{$ENDIF});
var
  i, ButtonCount_1: Integer;
begin
  ButtonCount_1 := ButtonCount - 1;
  for i := 0 to ButtonCount_1 do
    PDynTFTRadioGroup_CreateRadioButton(Left, Top + i * Height, Width, Height, Captions[i], Parent);
end;

//PageControl code
type
  TTabButtonCaption = string[CMaxTabButtonStringLength];
  TTabButtonCaptionArr = array{$IFDEF IsMCU}[0..0]{$ENDIF} of TTabButtonCaption;
  TTabButtonIntegerArr = array{$IFDEF IsMCU}[0..0]{$ENDIF} of Integer;

procedure PDynTFTPageControl_CreateTabButton(Left, Top, Width, Height: Integer; {$IFDEF IsMCU} var {$ENDIF}Caption: string; Parent: PDynTFTPageControl);
var
  tabbtn: PDynTFTTabButton;
begin
  tabbtn := DynTFTTabButton_Create(Parent^.BaseProps.ScreenIndex, Left, Top, Width, Height);
  tabbtn^.Caption := Caption;
  DynTFTAddTabButtonToPageControl(Parent, tabbtn);
end;

procedure PDynTFTPageControl_CreateAllTabButtonsAsHorizontal(Left, Top, Height, PageCount: Integer; {$IFDEF IsMCU}var Lefts, Widths: TTabButtonIntegerArr {$ELSE} const Lefts, Widths: array of Integer{$ENDIF}; Parent: PDynTFTPageControl; {$IFDEF IsMCU}var Captions: TTabButtonCaptionArr{$ELSE} const Captions: array of TTabButtonCaption{$ENDIF});
var
  i, ButtonCount_1: Integer;
begin
  ButtonCount_1 := PageCount - 1;
  for i := 0 to ButtonCount_1 do
    PDynTFTPageControl_CreateTabButton(Left + Lefts[i], Top, Widths[i], Height, Captions[i], Parent);
end;

procedure PDynTFTPageControl_CreateAllTabButtonsAsVertical(Left, Top, Width, Height, PageCount: Integer; Parent: PDynTFTPageControl; {$IFDEF IsMCU}var Captions: TTabButtonCaptionArr{$ELSE} const Captions: array of TTabButtonCaption{$ENDIF});
var
  i, ButtonCount_1: Integer;
begin
  ButtonCount_1 := PageCount - 1;
  for i := 0 to ButtonCount_1 do
    PDynTFTPageControl_CreateTabButton(Left, Top + i * Height, Width, Height, Captions[i], Parent);
end;


const
  // DynTFTRadioGroup
  CATestRadioGroup1_Captions: array[0..3 - 1] of TRadioButtonCaption = ('RadioButton 1 fp', 'RadioButton 2 fp', 'RadioButton 3 fp');
  CDynTFTRadioGroup0_Captions: array[0..2 - 1] of TRadioButtonCaption = ('First', 'Second');

  // DynTFTPageControl
  CATestPageControl1_Captions: array[0..3 - 1] of TTabButtonCaption = ('Tab 1', 'Tab 2', 'Tab 3');
  CATestPageControl1_ButtonLefts: array[0..3 - 1] of Integer = (0, 81, 162);
  CATestPageControl1_ButtonWidths: array[0..3 - 1] of Integer = (80, 80, 80);
  CATestPageControl2_Captions: array[0..4 - 1] of TTabButtonCaption = ('First tab', 'Second tab', 'Third tab', 'Fourth tab');
  CATestPageControl2_ButtonLefts: array[0..4 - 1] of Integer = (0, 0, 0, 0);
  CATestPageControl2_ButtonWidths: array[0..4 - 1] of Integer = (81, 81, 81, 81);
  CATestPageControl3_Captions: array[0..4 - 1] of TTabButtonCaption = ('First tab', 'Second tab', 'Third tab', 'Fourth tab');
  CATestPageControl3_ButtonLefts: array[0..4 - 1] of Integer = (0, 0, 0, 0);
  CATestPageControl3_ButtonWidths: array[0..4 - 1] of Integer = (81, 81, 81, 81);


procedure CreateGUI_Screen_0;
begin
  ATestPageControl1 := DynTFTPageControl_Create(0, 200, 570, 500, 40);
  {$DEFINE ATestPageControl1_CHorizontal}
  {$IFDEF ATestPageControl1_CVertical}
    PDynTFTPageControl_CreateAllTabButtonsAsVertical(200, 570, 500, 30, 3, ATestPageControl1, CATestPageControl1_Captions);
  {$ELSE}
    PDynTFTPageControl_CreateAllTabButtonsAsHorizontal(200, 570, 40, 3, CATestPageControl1_ButtonLefts, CATestPageControl1_ButtonWidths, ATestPageControl1, CATestPageControl1_Captions);
  {$ENDIF}
  {$DEFINE ATestPageControl1_Enabled_1}
  {$IFDEF ATestPageControl1_Enabled_0}
    DynTFTDisablePageControl(ATestPageControl1);
  {$ENDIF}

  ATestButton := DynTFTButton_Create(0, 20, 20, 80, 16);
  ATestButton^.Caption := 'shapes';
  {$IFDEF IsDesktop}
    ATestButton^.BaseProps.OnMouseUpUser^ := TestShapes_OnMouseDownUser;
  {$ELSE}
    ATestButton^.BaseProps.OnMouseUpUser := @TestShapes_OnMouseDownUser;
  {$ENDIF}

  ATestArrowButton1 := DynTFTArrowButton_CreateWithArrow(0, 40, 60, 40, 16, CUpArrow);

  ATestArrowButton2 := DynTFTArrowButton_CreateWithArrow(0, 120, 60, 40, 16, CDownArrow);

  ATestArrowButton3 := DynTFTArrowButton_CreateWithArrow(0, 40, 90, 40, 16, CLeftArrow);

  ATestArrowButton4 := DynTFTArrowButton_CreateWithArrow(0, 120, 90, 40, 16, CRightArrow);

  ATestArrowButton5 := DynTFTArrowButton_CreateWithArrow(0, 240, 60, 40, 30, CUpArrow);

  ATestArrowButton6 := DynTFTArrowButton_CreateWithArrow(0, 320, 60, 40, 30, CDownArrow);

  ATestArrowButton7 := DynTFTArrowButton_CreateWithArrow(0, 240, 100, 40, 30, CLeftArrow);

  ATestArrowButton8 := DynTFTArrowButton_CreateWithArrow(0, 320, 100, 40, 30, CRightArrow);

  ATestButton2 := DynTFTButton_Create(0, 20, 220, 80, 16);
  ATestButton2^.BaseProps.Enabled := 0;
  ATestButton2^.BaseProps.CanHandleMessages := False;
  ATestButton2^.Caption := 'Disabled';

  ATestArrowButton9 := DynTFTArrowButton_CreateWithArrow(0, 40, 260, 40, 16, CUpArrow);
  ATestArrowButton9^.BaseProps.Enabled := 0;
  ATestArrowButton9^.BaseProps.CanHandleMessages := False;

  ATestArrowButton10 := DynTFTArrowButton_CreateWithArrow(0, 120, 260, 40, 16, CDownArrow);
  ATestArrowButton10^.BaseProps.Enabled := 0;
  ATestArrowButton10^.BaseProps.CanHandleMessages := False;

  ATestArrowButton11 := DynTFTArrowButton_CreateWithArrow(0, 40, 290, 40, 16, CLeftArrow);
  ATestArrowButton11^.BaseProps.Enabled := 0;
  ATestArrowButton11^.BaseProps.CanHandleMessages := False;

  ATestArrowButton12 := DynTFTArrowButton_CreateWithArrow(0, 120, 290, 40, 16, CRightArrow);
  ATestArrowButton12^.BaseProps.Enabled := 0;
  ATestArrowButton12^.BaseProps.CanHandleMessages := False;

  ATestArrowButton13 := DynTFTArrowButton_CreateWithArrow(0, 240, 260, 40, 30, CUpArrow);
  ATestArrowButton13^.BaseProps.Enabled := 0;
  ATestArrowButton13^.BaseProps.CanHandleMessages := False;

  ATestArrowButton14 := DynTFTArrowButton_CreateWithArrow(0, 320, 260, 40, 30, CDownArrow);
  ATestArrowButton14^.BaseProps.Enabled := 0;
  ATestArrowButton14^.BaseProps.CanHandleMessages := False;

  ATestArrowButton15 := DynTFTArrowButton_CreateWithArrow(0, 240, 300, 40, 30, CLeftArrow);
  ATestArrowButton15^.BaseProps.Enabled := 0;
  ATestArrowButton15^.BaseProps.CanHandleMessages := False;

  ATestArrowButton16 := DynTFTArrowButton_CreateWithArrow(0, 320, 300, 40, 30, CRightArrow);
  ATestArrowButton16^.BaseProps.Enabled := 0;
  ATestArrowButton16^.BaseProps.CanHandleMessages := False;

  ATestButton3 := DynTFTButton_Create(0, 320, 20, 100, 20);
  ATestButton3^.Caption := 'Create button';
  ATestButton3^.Color := CL_YELLOW;
  ATestButton3^.Font_Color := CL_RED;
  {$IFDEF IsDesktop}
    ATestButton3^.BaseProps.OnMouseUpUser^ := CreateNewButton_OnMouseUpUser;
  {$ELSE}
    ATestButton3^.BaseProps.OnMouseUpUser := @CreateNewButton_OnMouseUpUser;
  {$ENDIF}

  ATestCheckBox1 := DynTFTCheckBox_Create(0, 192, 528, 120, 20);
  ATestCheckBox1^.Caption := 'Password Char';
  ATestCheckBox1^.Color := CL_YELLOW;
  {$IFDEF IsDesktop}
    ATestCheckBox1^.BaseProps.OnMouseUpUser^ := CheckPasswordChar_OnMouseUpUser;
  {$ELSE}
    ATestCheckBox1^.BaseProps.OnMouseUpUser := @CheckPasswordChar_OnMouseUpUser;
  {$ENDIF}

  ATestCheckBox2 := DynTFTCheckBox_Create(0, 10, 335, 100, 20);
  ATestCheckBox2^.BaseProps.Enabled := 0;
  ATestCheckBox2^.BaseProps.CanHandleMessages := False;
  ATestCheckBox2^.Caption := 'Disabled';

  ATestCheckBox3 := DynTFTCheckBox_Create(0, 364, 438, 120, 20);
  ATestCheckBox3^.Caption := 'ScrBar Visibility';
  ATestCheckBox3^.Color := CL_AQUA;
  ATestCheckBox3^.Checked := True;
  {$IFDEF IsDesktop}
    ATestCheckBox3^.BaseProps.OnMouseUpUser^ := CheckTestVisibility_OnMouseUpUser;
  {$ELSE}
    ATestCheckBox3^.BaseProps.OnMouseUpUser := @CheckTestVisibility_OnMouseUpUser;
  {$ENDIF}

  ATestCheckBox4 := DynTFTCheckBox_Create(0, 364, 478, 120, 20);
  ATestCheckBox4^.Caption := 'ScrBar Enabling';
  ATestCheckBox4^.Color := CL_FUCHSIA;
  {$IFDEF IsDesktop}
    ATestCheckBox4^.BaseProps.OnMouseUpUser^ := CheckTestEnabling_OnMouseUpUser;
  {$ELSE}
    ATestCheckBox4^.BaseProps.OnMouseUpUser := @CheckTestEnabling_OnMouseUpUser;
  {$ENDIF}

  ATestCheckBox5 := DynTFTCheckBox_Create(0, 364, 520, 120, 20);
  ATestCheckBox5^.Caption := 'rdBtn Visibility';
  ATestCheckBox5^.Color := CL_WHITE;
  ATestCheckBox5^.Checked := True;
  {$IFDEF IsDesktop}
    ATestCheckBox5^.BaseProps.OnMouseUpUser^ := CheckTestRdBtnVisibility_OnMouseUpUser;
  {$ELSE}
    ATestCheckBox5^.BaseProps.OnMouseUpUser := @CheckTestRdBtnVisibility_OnMouseUpUser;
  {$ENDIF}

  ATestCheckBox6 := DynTFTCheckBox_Create(0, 490, 520, 120, 20);
  ATestCheckBox6^.Caption := 'LstBox Visibility';
  ATestCheckBox6^.Color := CL_YELLOW;
  ATestCheckBox6^.Checked := True;
  {$IFDEF IsDesktop}
    ATestCheckBox6^.BaseProps.OnMouseUpUser^ := CheckTestLstBoxVisibility_OnMouseUpUser;
  {$ELSE}
    ATestCheckBox6^.BaseProps.OnMouseUpUser := @CheckTestLstBoxVisibility_OnMouseUpUser;
  {$ENDIF}

  ATestCheckBox7 := DynTFTCheckBox_Create(0, 490, 438, 120, 20);
  ATestCheckBox7^.Caption := 'rdGrp Visibility';
  ATestCheckBox7^.Color := CL_RED;
  ATestCheckBox7^.Checked := True;
  {$IFDEF IsDesktop}
    ATestCheckBox7^.BaseProps.OnMouseUpUser^ := CheckTestRdGrpVisibility_OnMouseUpUser;
  {$ELSE}
    ATestCheckBox7^.BaseProps.OnMouseUpUser := @CheckTestRdGrpVisibility_OnMouseUpUser;
  {$ENDIF}

  ATestCheckBox8 := DynTFTCheckBox_Create(0, 490, 478, 120, 20);
  ATestCheckBox8^.Caption := 'pag Visibility';
  ATestCheckBox8^.Color := CL_GREEN;
  ATestCheckBox8^.Checked := True;
  {$IFDEF IsDesktop}
    ATestCheckBox8^.BaseProps.OnMouseUpUser^ := CheckTestPagVisibility_OnMouseUpUser;
  {$ELSE}
    ATestCheckBox8^.BaseProps.OnMouseUpUser := @CheckTestPagVisibility_OnMouseUpUser;
  {$ENDIF}

  ATestPanel1 := DynTFTPanel_Create(0, 44, 142, 80, 30);
  ATestPanel1^.Caption := 'Panel 1';

  ATestPanel2 := DynTFTPanel_Create(0, 44, 182, 90, 30);
  ATestPanel2^.BaseProps.Enabled := 0;
  ATestPanel2^.BaseProps.CanHandleMessages := False;
  ATestPanel2^.Caption := 'Disabled';

  ATestPanel3 := DynTFTPanel_Create(0, 144, 142, 100, 30);
  ATestPanel3^.Caption := 'Panel 2';

  ATestScrollBar1 := DynTFTScrollBar_CreateWithDir(0, 272, 144, 200, 30, CScrollBarHorizDir);
  {$DEFINE ATestScrollBar1_Enabled_1}
  {$IFDEF ATestScrollBar1_Enabled_0}
    DynTFTDisableScrollBar(ATestScrollBar1);
  {$ENDIF}

  ATestScrollBar2 := DynTFTScrollBar_CreateWithDir(0, 442, 200, 30, 200, CScrollBarVertDir);
  {$DEFINE ATestScrollBar2_Enabled_1}
  {$IFDEF ATestScrollBar2_Enabled_0}
    DynTFTDisableScrollBar(ATestScrollBar2);
  {$ENDIF}
  {$IFDEF IsDesktop}
    ATestScrollBar2^.OnScrollBarChange^ := TestScrollBarChange;
  {$ELSE}
    ATestScrollBar2^.OnScrollBarChange := @TestScrollBarChange;
  {$ENDIF}

  ATestScrollBar3 := DynTFTScrollBar_CreateWithDir(0, 486, 200, 30, 200, CScrollBarVertDir);
  {$DEFINE ATestScrollBar3_Enabled_0}
  {$IFDEF ATestScrollBar3_Enabled_0}
    DynTFTDisableScrollBar(ATestScrollBar3);
  {$ENDIF}
  ATestScrollBar3^.BaseProps.Enabled := 0;

  ATestListBox := DynTFTListBox_Create(0, 133, 339, 200, 76);
  ATestListBox^.BaseProps.CanHandleMessages := False;
  {$IFNDEF UseExternalItems}
    ATestListBox^.Items^.Strings[0] := 'one';
    ATestListBox^.Items^.Strings[1] := 'two';
    ATestListBox^.Items^.Strings[2] := 'three';
    ATestListBox^.Items^.Strings[3] := 'four';
    ATestListBox^.Items^.Strings[4] := 'five';
    ATestListBox^.Items^.Strings[5] := 'six';
    ATestListBox^.Items^.Strings[6] := 'seven';
    ATestListBox^.Items^.Strings[7] := 'eight';
    ATestListBox^.Items^.Strings[8] := 'nine';
    ATestListBox^.Items^.Strings[9] := 'ten';
    ATestListBox^.Items^.Strings[10] := 'eleven';
    ATestListBox^.Items^.Strings[11] := 'twelve';
    ATestListBox^.Items^.Strings[12] := 'thirteen';
    ATestListBox^.Items^.Strings[13] := 'fourteen';
    ATestListBox^.Items^.Strings[14] := 'fifteen';
    ATestListBox^.Items^.Strings[15] := 'sixteen - fpWgJj';
  {$ENDIF}
  ATestListBox^.Items^.ItemHeight := 13;
  ATestListBox^.Items^.Count := 16;
  {$IFDEF UseExternalItems}
    {$IFDEF IsDesktop}
      ATestListBox^.Items^.OnGetItem^ := ListBoxItemsGetItemText;
    {$ELSE}
      ATestListBox^.Items^.OnGetItem := @ListBoxItemsGetItemText;
    {$ENDIF}
  {$ENDIF}

  ATestLabel1 := DynTFTLabel_Create(0, 236, 20, 80, 20);
  ATestLabel1^.BaseProps.Enabled := 0;
  ATestLabel1^.BaseProps.CanHandleMessages := False;
  ATestLabel1^.Caption := 'lblDisabled';

  ATestLabel2 := DynTFTLabel_Create(0, 130, 20, 100, 30);
  ATestLabel2^.BaseProps.CanHandleMessages := False;
  ATestLabel2^.Caption := 'My label';
  ATestLabel2^.Color := CL_GREEN;
  ATestLabel2^.Font_Color := CL_WHITE;

  ATestLabel3 := DynTFTLabel_Create(0, 497, 575, 100, 20);
  ATestLabel3^.BaseProps.CanHandleMessages := False;
  ATestLabel3^.Caption := 'Repainted area';
  ATestLabel3^.Color := CL_MAROON;
  ATestLabel3^.Font_Color := CL_WHITE;

  ATestRadioGroup1 := DynTFTRadioGroup_Create(0, 12, 444, 150, 130);
  PDynTFTRadioGroup_CreateAllRadioButtons(12 + 5, 444 + 30 + 5 - 1, 150 - 5 - 6, 30, 3, ATestRadioGroup1, CATestRadioGroup1_Captions);
  {$DEFINE ATestRadioGroup1_Enabled_1}
  {$IFDEF ATestRadioGroup1_Enabled_0}
    DynTFTDisableRadioGroup(ATestRadioGroup1);
  {$ENDIF}
  ATestRadioGroup1^.Caption := 'Some RadioGroup';
  ATestRadioGroup1^.ItemIndex := 0;
  {$IFDEF IsDesktop}
    ATestRadioGroup1^.OnSelectionChanged^ := ATestRadioGroup1_OnSelectionChanged;
  {$ELSE}
    ATestRadioGroup1^.OnSelectionChanged := @ATestRadioGroup1_OnSelectionChanged;
  {$ENDIF}

  ATestEdit1 := DynTFTEdit_Create(0, 192, 434, 150, 22);
  ATestEdit1^.BaseProps.Enabled := 0;
  ATestEdit1^.BaseProps.CanHandleMessages := False;
  ATestEdit1^.Text := 'This is another long text for Edit.';

  ATestEdit2 := DynTFTEdit_Create(0, 192, 500, 150, 22);
  ATestEdit2^.Text := 'This is the second long text Edit.';

  ATestArrowButton17 := DynTFTArrowButton_CreateWithArrow(0, 194, 462, 40, 16, CLeftArrow);
  ATestArrowButton17^.BaseProps.Focused := CREJECTFOCUS;
  {$IFDEF IsDesktop}
    ATestArrowButton17^.BaseProps.OnMouseDownUser^ := MoveCarretLeft;
  {$ELSE}
    ATestArrowButton17^.BaseProps.OnMouseDownUser := @MoveCarretLeft;
  {$ENDIF}

  ATestArrowButton18 := DynTFTArrowButton_CreateWithArrow(0, 240, 462, 40, 16, CRightArrow);
  ATestArrowButton18^.BaseProps.Focused := CREJECTFOCUS;
  {$IFDEF IsDesktop}
    ATestArrowButton18^.BaseProps.OnMouseDownUser^ := MoveCarretRight;
  {$ELSE}
    ATestArrowButton18^.BaseProps.OnMouseDownUser := @MoveCarretRight;
  {$ENDIF}

  btnCreateKeyboard := DynTFTButton_Create(0, 200, 614, 130, 20);
  btnCreateKeyboard^.Caption := 'Create Keyboard';
  {$IFDEF IsDesktop}
    btnCreateKeyboard^.BaseProps.OnMouseUpUser^ := CreateNewKeyButtons_OnMouseUpUser;
  {$ELSE}
    btnCreateKeyboard^.BaseProps.OnMouseUpUser := @CreateNewKeyButtons_OnMouseUpUser;
  {$ENDIF}

  ATestButton4 := DynTFTButton_Create(0, 580, 20, 100, 20);
  ATestButton4^.Caption := 'DestroyTab';
  {$IFDEF IsDesktop}
    ATestButton4^.BaseProps.OnMouseUpUser^ := DestroyTab_OnMouseUpUser;
  {$ELSE}
    ATestButton4^.BaseProps.OnMouseUpUser := @DestroyTab_OnMouseUpUser;
  {$ENDIF}

  ATestButton5 := DynTFTButton_Create(0, 580, 40, 100, 20);
  ATestButton5^.Caption := 'DestroyPage';
  {$IFDEF IsDesktop}
    ATestButton5^.BaseProps.OnMouseUpUser^ := DestroyPage_OnMouseUpUser;
  {$ELSE}
    ATestButton5^.BaseProps.OnMouseUpUser := @DestroyPage_OnMouseUpUser;
  {$ENDIF}

  ATestButton6 := DynTFTButton_Create(0, 580, 60, 100, 20);
  ATestButton6^.Caption := 'DestroyRdBtn';
  {$IFDEF IsDesktop}
    ATestButton6^.BaseProps.OnMouseUpUser^ := DestroyRdBtn_OnMouseUpUser;
  {$ELSE}
    ATestButton6^.BaseProps.OnMouseUpUser := @DestroyRdBtn_OnMouseUpUser;
  {$ENDIF}

  ATestButton7 := DynTFTButton_Create(0, 580, 80, 100, 20);
  ATestButton7^.Caption := 'DestroyRdGrp';
  {$IFDEF IsDesktop}
    ATestButton7^.BaseProps.OnMouseUpUser^ := DestroyRdGrp_OnMouseUpUser;
  {$ELSE}
    ATestButton7^.BaseProps.OnMouseUpUser := @DestroyRdGrp_OnMouseUpUser;
  {$ENDIF}

  ATestButton8 := DynTFTButton_Create(0, 580, 110, 100, 20);
  ATestButton8^.Caption := 'Self Destroy';
  {$IFDEF IsDesktop}
    ATestButton8^.BaseProps.OnMouseUpUser^ := SelfDestroy_OnMouseUpUser;
  {$ELSE}
    ATestButton8^.BaseProps.OnMouseUpUser := @SelfDestroy_OnMouseUpUser;
  {$ENDIF}

  AComboBox1 := DynTFTComboBox_Create(0, 550, 412, 150, 20);
  {$DEFINE AComboBox1_Enabled_1}
  {$IFDEF AComboBox1_Enabled_0}
    DynTFTDisableComboBox(AComboBox1);
  {$ENDIF}
  {$IFDEF DynTFTFontSupport}
    AComboBox1^.ListBox^.Items^.ActiveFont := 0;
  {$ENDIF}
  {$IFNDEF UseExternalItems}
    AComboBox1^.ListBox^.Items^.Strings[0] := 'one';
    AComboBox1^.ListBox^.Items^.Strings[1] := 'two';
    AComboBox1^.ListBox^.Items^.Strings[2] := 'three';
    AComboBox1^.ListBox^.Items^.Strings[3] := 'four';
    AComboBox1^.ListBox^.Items^.Strings[4] := 'five';
    AComboBox1^.ListBox^.Items^.Strings[5] := 'six';
    AComboBox1^.ListBox^.Items^.Strings[6] := 'seven';
    AComboBox1^.ListBox^.Items^.Strings[7] := 'eight';
    AComboBox1^.ListBox^.Items^.Strings[8] := 'nine';
    AComboBox1^.ListBox^.Items^.Strings[9] := 'ten';
    AComboBox1^.ListBox^.Items^.Strings[10] := 'eleven';
    AComboBox1^.ListBox^.Items^.Strings[11] := 'twelve';
  {$ENDIF}
  {$IFDEF DynTFTFontSupport}
    AComboBox1^.Edit^.ActiveFont := 0;
  {$ENDIF}
  AComboBox1^.ListBox^.Items^.Count := 12;
  {$IFDEF UseExternalItems}
    {$IFDEF IsDesktop}
      AComboBox1^.ListBox^.Items^.OnGetItem^ := ComboBoxItemsGetItemText;
    {$ELSE}
      AComboBox1^.ListBox^.Items^.OnGetItem := @ComboBoxItemsGetItemText;
    {$ENDIF}
  {$ENDIF}

  ATestButton9 := DynTFTButton_Create(0, 550, 383, 150, 20);
  ATestButton9^.Caption := 'Toggle editable cmb';
  ATestButton9^.Font_Color := CL_TEAL;
  {$IFDEF IsDesktop}
    ATestButton9^.BaseProps.OnMouseUpUser^ := ToggleCmbEditable_OnMouseUpUser;
  {$ELSE}
    ATestButton9^.BaseProps.OnMouseUpUser := @ToggleCmbEditable_OnMouseUpUser;
  {$ENDIF}

  ATrackBar1 := DynTFTTrackBar_CreateWithDir(0, 338, 648, 150, 24, CTrackBarHorizDir);
  {$DEFINE ATrackBar1_Enabled_1}
  {$IFDEF ATrackBar1_Enabled_0}
    DynTFTDisableTrackBar(ATrackBar1);
  {$ENDIF}
  ATrackBar1^.Max := 128;
  ATrackBar1^.Position := 100;
  {$IFDEF IsDesktop}
    ATrackBar1^.OnTrackBarChange^ := HorizTrackBar_OnTrackBarChange;
  {$ELSE}
    ATrackBar1^.OnTrackBarChange := @HorizTrackBar_OnTrackBarChange;
  {$ENDIF}

  ATrackBar2 := DynTFTTrackBar_CreateWithDir(0, 640, 480, 24, 150, CTrackBarVertDir);
  {$DEFINE ATrackBar2_Enabled_1}
  {$IFDEF ATrackBar2_Enabled_0}
    DynTFTDisableTrackBar(ATrackBar2);
  {$ENDIF}
  {$IFDEF IsDesktop}
    ATrackBar2^.OnTrackBarChange^ := VertTrackBar_OnTrackBarChange;
  {$ELSE}
    ATrackBar2^.OnTrackBarChange := @VertTrackBar_OnTrackBarChange;
  {$ENDIF}

  ATrackBar3 := DynTFTTrackBar_CreateWithDir(0, 338, 680, 150, 24, CTrackBarHorizDir);
  {$DEFINE ATrackBar3_Enabled_0}
  {$IFDEF ATrackBar3_Enabled_0}
    DynTFTDisableTrackBar(ATrackBar3);
  {$ENDIF}
  ATrackBar3^.BaseProps.Enabled := 0;

  ATrackBar4 := DynTFTTrackBar_CreateWithDir(0, 670, 480, 24, 150, CTrackBarVertDir);
  {$DEFINE ATrackBar4_Enabled_0}
  {$IFDEF ATrackBar4_Enabled_0}
    DynTFTDisableTrackBar(ATrackBar4);
  {$ENDIF}
  ATrackBar4^.BaseProps.Enabled := 0;

  AProgressBarH := DynTFTProgressBar_CreateWithDir(0, 338, 712, 150, 20, CProgressBarHorizDir);
  AProgressBarH^.BaseProps.CanHandleMessages := False;
  AProgressBarH^.Max := 128;
  AProgressBarH^.Position := 3;

  AProgressBarV := DynTFTProgressBar_CreateWithDir(0, 700, 480, 20, 150, CProgressBarVertDir);
  AProgressBarV^.BaseProps.CanHandleMessages := False;
  AProgressBarV^.Position := 6;

  ALabelH := DynTFTLabel_Create(0, 498, 648, 80, 20);
  ALabelH^.BaseProps.CanHandleMessages := False;
  ALabelH^.Caption := '100';

  ALabelV := DynTFTLabel_Create(0, 640, 648, 80, 20);
  ALabelV^.BaseProps.CanHandleMessages := False;
  ALabelV^.Caption := '0';

  btnMsgBox := DynTFTButton_Create(0, 580, 280, 80, 20);
  btnMsgBox^.Caption := 'MsgBox';
  {$IFDEF IsDesktop}
    btnMsgBox^.BaseProps.OnMouseUpUser^ := btnMsgBox_OnMouseUpUser;
  {$ELSE}
    btnMsgBox^.BaseProps.OnMouseUpUser := @btnMsgBox_OnMouseUpUser;
  {$ENDIF}

  SelfDestroyButton := DynTFTButton_Create(0, 580, 140, 100, 20);
  SelfDestroyButton^.Caption := 'SelfDestroy';
  {$IFDEF IsDesktop}
    SelfDestroyButton^.BaseProps.OnMouseUpUser^ := SelfDestroy_OnMouseUpUser;
  {$ELSE}
    SelfDestroyButton^.BaseProps.OnMouseUpUser := @SelfDestroy_OnMouseUpUser;
  {$ENDIF}

  // AVirtualKeyboard should be manually created.

  ATestPageControl2 := DynTFTPageControl_Create(0, 503, 683, 98, 145);
  {$DEFINE ATestPageControl2_CVertical}
  {$IFDEF ATestPageControl2_CVertical}
    PDynTFTPageControl_CreateAllTabButtonsAsVertical(503, 683, 98, 30, 4, ATestPageControl2, CATestPageControl2_Captions);
  {$ELSE}
    PDynTFTPageControl_CreateAllTabButtonsAsHorizontal(503, 683, 145, 4, CATestPageControl2_ButtonLefts, CATestPageControl2_ButtonWidths, ATestPageControl2, CATestPageControl2_Captions);
  {$ENDIF}
  {$DEFINE ATestPageControl2_Enabled_1}
  {$IFDEF ATestPageControl2_Enabled_0}
    DynTFTDisablePageControl(ATestPageControl2);
  {$ENDIF}
  ATestPageControl2^.ActiveIndex := 1;

  DynTFTRadioGroup0 := DynTFTRadioGroup_Create(0, 12, 579, 150, 62);
  PDynTFTRadioGroup_CreateAllRadioButtons(12 + 5, 579 + 15 + 10 - 1, 150 - 5 - 6, 15, 2, DynTFTRadioGroup0, CDynTFTRadioGroup0_Captions);
  {$DEFINE DynTFTRadioGroup0_Enabled_0}
  {$IFDEF DynTFTRadioGroup0_Enabled_0}
    DynTFTDisableRadioGroup(DynTFTRadioGroup0);
  {$ENDIF}
  DynTFTRadioGroup0^.BaseProps.Enabled := 0;
  DynTFTRadioGroup0^.Caption := 'DynTFTRadioGroup0';
  DynTFTRadioGroup0^.ItemIndex := 1;

  ATestPageControl3 := DynTFTPageControl_Create(0, 611, 683, 98, 145);
  {$DEFINE ATestPageControl3_CVertical}
  {$IFDEF ATestPageControl3_CVertical}
    PDynTFTPageControl_CreateAllTabButtonsAsVertical(611, 683, 98, 30, 4, ATestPageControl3, CATestPageControl3_Captions);
  {$ELSE}
    PDynTFTPageControl_CreateAllTabButtonsAsHorizontal(611, 683, 145, 4, CATestPageControl3_ButtonLefts, CATestPageControl3_ButtonWidths, ATestPageControl3, CATestPageControl3_Captions);
  {$ENDIF}
  {$DEFINE ATestPageControl3_Enabled_0}
  {$IFDEF ATestPageControl3_Enabled_0}
    DynTFTDisablePageControl(ATestPageControl3);
  {$ENDIF}
  ATestPageControl3^.BaseProps.Enabled := 0;
  ATestPageControl3^.ActiveIndex := 2;

  DynTFTComboBox0 := DynTFTComboBox_Create(0, 550, 324, 150, 20);
  {$DEFINE DynTFTComboBox0_Enabled_0}
  {$IFDEF DynTFTComboBox0_Enabled_0}
    DynTFTDisableComboBox(DynTFTComboBox0);
  {$ENDIF}
  DynTFTComboBox0^.BaseProps.Enabled := 0;
  {$IFDEF DynTFTFontSupport}
    DynTFTComboBox0^.ListBox^.Items^.ActiveFont := 0;
  {$ENDIF}
  {$IFNDEF UseExternalItems}
    DynTFTComboBox0^.ListBox^.Items^.Strings[0] := 'one';
    DynTFTComboBox0^.ListBox^.Items^.Strings[1] := 'two';
    DynTFTComboBox0^.ListBox^.Items^.Strings[2] := 'three';
    DynTFTComboBox0^.ListBox^.Items^.Strings[3] := 'four';
    DynTFTComboBox0^.ListBox^.Items^.Strings[4] := 'five';
    DynTFTComboBox0^.ListBox^.Items^.Strings[5] := 'six';
    DynTFTComboBox0^.ListBox^.Items^.Strings[6] := 'seven';
    DynTFTComboBox0^.ListBox^.Items^.Strings[7] := 'eight';
    DynTFTComboBox0^.ListBox^.Items^.Strings[8] := 'nine';
    DynTFTComboBox0^.ListBox^.Items^.Strings[9] := 'ten';
    DynTFTComboBox0^.ListBox^.Items^.Strings[10] := 'eleven';
    DynTFTComboBox0^.ListBox^.Items^.Strings[11] := 'twelve';
  {$ENDIF}
  {$IFDEF DynTFTFontSupport}
    DynTFTComboBox0^.Edit^.ActiveFont := 0;
  {$ENDIF}
  DynTFTComboBox0^.ListBox^.Items^.Count := 12;

end;

procedure DrawGUI;
begin
  CreateGUI_Screen_0;
  DynTFTRepaintScreenComponents(0, CREPAINTONSTARTUP, nil);
end;


procedure DynTFT_GUI_Start;
begin
  {$IFDEF IsDesktop}
    DynTFT_DebugConsole('Entering DynTFT_GUI_Start');
  {$ENDIF}

  DynTFTInitInputDevStateFlags;

  DynTFTInitComponentTypeRegistration;
  DynTFTInitComponentContainers;    //must be called after InitComponentTypeRegistration
  RegisterAllComponentsEvents;

  SetScreenActivity;
  DrawGUI;
end;

end.
